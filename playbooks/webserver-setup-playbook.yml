- name: Web Server First Setup
  hosts: webservers
  become: true

  vars:
      site_name: bcutdev.tech
      blog_path : /www/blog
      vpn_public_ip: 129.148.50.42

  tasks:
    - name: Ensure all dependencies are present
      ansible.builtin.dnf:
        name:
          - nginx
          - cockpit
          - libuv
          - pcp-libs
          - pcp-conf
          - pcp-selinux
          - pcp
          - python3-pcp
          - python3
          - python-devel
          - augeas
          - augeas-libs
          - gcc
          - git
        state: present
        update_cache: true

    - name: Add cockpit configuration file
      ansible.builtin.file:
        path: /etc/cockpit/cockpit.conf
        state: touch
    - name: Configure cockpit
      ansible.builtin.blockinfile:
        path: /etc/cockpit/cockpit.conf
        append_newline: true
        block: |
          [WebService]
          Origins = https://{{ site_name }} wss://{{ site_name }}
          ProtocolHeader = X-Forwarded-Proto
          UrlRoot = /cockpit
          
    - name: Fix cockpit proxy 502 error
      ansible.posix.seboolean:
        name: httpd_can_network_connect
        persistent: true
        state: true

    - name: Ensure cockpit services are running
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - cockpit
        - pmlogger

    - name: Allow HTTP and HTTPS traffic through firewall
      ansible.posix.firewalld:
        service: "{{ item }}"
        zone: public
        state: enabled
        immediate: true
        permanent: true
      loop:
        - http
        - https
        - ssh

    - name: Disable cockpit traffic from public network
      ansible.posix.firewalld:
        service: cockpit
        state: disabled
        zone: public
        immediate: true
        permanent: true
        offline: true

    - name: Add VPN network to dmz
      ansible.posix.firewalld:
        zone: dmz
        source: "{{ vpn_public_ip }}"
        state: enabled
        immediate: true
        permanent: true

    - name: Create blog group
      ansible.builtin.group:
        name: blog

    - name: Create github user
      ansible.builtin.user:
        name: githubuser
        password: "!"
        group: blog

    - name: Create .ssh directory
      ansible.builtin.file:
        path: /home/githubuser/.ssh
        state: directory

    - name: Copy Github keys to ~/.ssh
      ansible.builtin.copy:
        src: "./secrets/{{ item }}"
        dest: "/home/githubuser/.ssh/{{ item }}"
        owner: githubuser
        mode: 700
      loop:
        - "github_access_key"
        - "github_access_key.pub"

    - name: Move publikey to authorized_keys
      ansible.builtin.copy:
        src: "./secrets/actions_key.pub"
        dest: "/home/githubuser/.ssh/authorized_keys"
        owner: githubuser
        
    - name: Setup github access
      ansible.builtin.blockinfile:
        path: /home/githubuser/.ssh/config
        owner: githubuser
        create: true
        block: |
          Host github.com
            HostName github.com
            User git
            IdentityFile /home/githubuser/.ssh/github_access_key

    - name: Set ownership of githubuser/.ssh 
      ansible.builtin.file:
        path: /home/githubuser/.ssh
        owner: githubuser
        group: githubuser

    - name: Change mode of authorized_keys file
      ansible.builtin.file:
        path: "/home/githubuser/.ssh/authorized_keys"
        mode: 600

    - name: Set githubuser/.ssh SELinux context
      ansible.builtin.sefcontext:
        path: "/home/githubuser/.ssh(/.*)?"
        reload: true
        setype: ssh_home_t

    - name: Apply SELinux context
      ansible.builtin.command:
        cmd: restorecon -irv /home/githubuser/.ssh
    

    - name: Create NGINX user
      ansible.builtin.user:
        name: nginx
        state: present
        group: blog

    - name: Delete existing blog directory if necessary
      ansible.builtin.file:
        path: "{{ blog_path }}"
        state: absent

    - name: Create blog directory
      ansible.builtin.file:
        path: "{{ blog_path }}"
        state: directory
        group: blog

   

    - name: Copy over NGINX config
      ansible.builtin.copy:
        src: "./confs/nginx.conf"
        dest: /etc/nginx/nginx.conf
        owner: nginx

    - name: Start Nginx
      ansible.builtin.service:
        name: nginx
        state: started
        enabled: true

    - name: Add cockpit and ssh to dmz
      ansible.posix.firewalld:
        service: "{{ item }}"
        zone: dmz
        state: enabled
        immediate: true
        permanent: true
      loop:
        - cockpit
        - ssh

    - name: Clone website contents
      ansible.builtin.git:
        dest: "{{ blog_path }}"
        repo: git@github.com:B-Cut/HugoBlog.git
        version: public
        accept_hostkey: yes
        key_file: /home/githubuser/.ssh/github_access_key

    - name: Set correct SELinux context
      ansible.builtin.sefcontext:
        path: "{{ blog_path }}(/.*)?"
        reload: true
        substitute: public_content_rw_t

    - name: Apply SELinux context
      ansible.builtin.command:
        cmd: restorecon -irv "{{ blog_path }}"
      
    - name: Ensure correct ownership of contents
      ansible.builtin.file:
        path: /www
        owner: admin
        group: blog
        recurse: yes
        mode: 0775

    

    - name: Manually create certbot venv
      ansible.builtin.command:
        cmd: python3 -m venv /opt/certbot/
    
    - name: Update pip
      ansible.builtin.pip:
        name:
          - pip
        virtualenv: /opt/certbot/

        state: forcereinstall

    - name: Install Certbot
      ansible.builtin.pip:
        name:
          - certbot
          - certbot-nginx

    - name: Agree to TOS
      shell: |
        /usr/local/bin/certbot -n register --agree-tos --email cgoncalves@id.uff.br
      # If we already have an account, don't count it as an error
      register: result
      failed_when:
        result.rc != 0 and 'existing account' not in result.stderr


    - name: Create .registered file
      ansible.builtin.file:
        path: /etc/letsencrypt/.registered
        state: touch
        

    - name: Add certificate renewal to cron
      ansible.builtin.cron:
        name: Certbot renewal
        user: root
        month: 12
        hour: 0
        minute: 0
        job: /opt/certbot/bin/python -c 'import random; import time; time.sleep(random.random() * 3600)' && sudo certbot renew -q

    - name: Add monthly Certbot updates
      ansible.builtin.cron:
        name: Certbot update 
        special_time: monthly
        job: /opt/certbot/bin/pip install --upgrade certbot certbot-nginx

    - name: Get Certificate
      ansible.builtin.command:
        cmd: '/usr/local/bin/certbot -n --nginx -d bcutdev.tech'